def process_raw_data(raw_data):
    # Split the input data into lines and clean up unnecessary characters
    lines = raw_data.split('\n')
    clean_lines = [line.replace('.byte', '').replace('$', '').strip() for line in lines if line.strip()]

    # Convert clean lines to 2D array of integers
    tile_grid = []
    for line in clean_lines:
        row = [int(x, 16) for x in line.split(',')]
        tile_grid.append(row)

    # Process metatiles from the tile grid
    metatiles = []
    rows = len(tile_grid)
    if rows % 4 != 0:  # Ensure we have a multiple of four rows for complete sets
        print("Warning: Number of lines is not a multiple of 4, some lines may be ignored.")

    # Processing tiles from first and third lines together, and second and fourth together
    for y in range(0, rows - 3, 4):  # Increment by four to start the next set of four rows
        for x in range(0, len(tile_grid[y]), 2):  # Ensure we capture pairs
            if x + 1 < len(tile_grid[y]):
                # First and third lines
                top_left = tile_grid[y][x]
                top_right = tile_grid[y][x+1]
                bottom_left = tile_grid[y+2][x]
                bottom_right = tile_grid[y+2][x+1]
                metatiles.append([top_left, top_right, bottom_left, bottom_right])

    # Adding second and fourth lines
    for y in range(0, rows - 3, 4):  # Repeat loop for second set of lines
        for x in range(0, len(tile_grid[y+1]), 2):
            if x + 1 < len(tile_grid[y+1]):
                top_left = tile_grid[y+1][x]
                top_right = tile_grid[y+1][x+1]
                bottom_left = tile_grid[y+3][x]
                bottom_right = tile_grid[y+3][x+1]
                metatiles.append([top_left, top_right, bottom_left, bottom_right])

    # Format output as .byte directives
    output_lines = []
    for tile in metatiles:
        formatted_tiles = ', '.join(f'${x:02X}' for x in tile)
        output_lines.append(f'.byte {formatted_tiles}')

    return '\n'.join(output_lines)

# Sample test data input for properly structured grouping
test_data = """
  .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  .byte $77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77
  .byte $77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77
  .byte $77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77
  .byte $77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77
  .byte $77,$77,$00,$00,$00,$a3,$00,$00,$a7,$00,$87,$87,$87,$87,$55,$58
  .byte $92,$92,$00,$00,$00,$00,$55,$58,$87,$87,$00,$00,$00,$00,$55,$58
  .byte $77,$77,$00,$00,$00,$a3,$00,$00,$00,$00,$87,$87,$87,$87,$55,$58
  .byte $92,$00,$00,$00,$00,$00,$55,$58,$87,$87,$00,$00,$00,$00,$55,$58
  .byte $77,$77,$00,$00,$55,$58,$00,$00,$55,$56,$56,$58,$87,$87,$92,$92
  .byte $92,$00,$55,$58,$87,$87,$55,$58,$87,$87,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$00,$00,$55,$58,$b8,$b8,$55,$56,$56,$58,$87,$87,$00,$00
  .byte $a7,$00,$55,$58,$87,$87,$55,$58,$87,$87,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$87,$87,$55,$58,$00,$b8,$00,$00,$55,$56,$56,$56,$56,$56
  .byte $56,$57,$57,$58,$87,$87,$87,$87,$87,$87,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$87,$87,$55,$58,$b8,$b8,$00,$00,$55,$56,$56,$56,$56,$56
  .byte $56,$56,$57,$58,$87,$87,$87,$87,$87,$87,$55,$58,$92,$00,$55,$58
  .byte $77,$77,$87,$87,$55,$56,$56,$56,$56,$56,$56,$58,$92,$92,$00,$00
  .byte $00,$00,$55,$58,$87,$87,$55,$58,$87,$87,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$87,$87,$55,$56,$56,$56,$56,$56,$56,$58,$92,$92,$00,$00
  .byte $92,$00,$55,$58,$87,$87,$55,$58,$87,$87,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$87,$87,$a8,$a8,$00,$92,$55,$58,$87,$87,$87,$87,$55,$58
  .byte $00,$00,$00,$00,$87,$87,$55,$58,$87,$87,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$87,$87,$a8,$a8,$92,$92,$55,$58,$87,$87,$87,$87,$55,$58
  .byte $92,$92,$00,$00,$87,$87,$55,$58,$87,$87,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$87,$87,$55,$58,$92,$92,$00,$00,$87,$87,$55,$57,$57,$57
  .byte $56,$57,$56,$57,$56,$57,$56,$58,$87,$87,$55,$58,$00,$00,$00,$00
  .byte $77,$77,$87,$87,$55,$58,$92,$00,$00,$00,$87,$87,$55,$57,$57,$57
  .byte $57,$57,$56,$56,$56,$56,$56,$58,$87,$87,$55,$58,$00,$00,$00,$00
  .byte $77,$77,$87,$87,$55,$58,$00,$00,$55,$58,$87,$87,$00,$00,$55,$58
  .byte $92,$92,$00,$00,$00,$00,$87,$87,$87,$87,$55,$56,$56,$56,$56,$56
  .byte $77,$77,$87,$87,$55,$58,$00,$00,$55,$58,$87,$87,$00,$00,$55,$58
  .byte $92,$92,$00,$00,$00,$00,$87,$87,$87,$87,$55,$56,$56,$56,$56,$56
  .byte $77,$77,$87,$87,$55,$58,$92,$92,$55,$58,$87,$87,$55,$57,$57,$58
  .byte $92,$92,$55,$57,$57,$58,$87,$87,$87,$87,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$87,$87,$55,$58,$00,$00,$55,$58,$87,$87,$55,$57,$57,$58
  .byte $92,$92,$55,$57,$57,$58,$87,$87,$87,$87,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$00,$00,$55,$58,$00,$00,$55,$58,$87,$87,$87,$87,$55,$58
  .byte $92,$92,$92,$92,$55,$58,$00,$92,$55,$56,$56,$58,$00,$00,$55,$58
  .byte $77,$77,$00,$00,$55,$58,$00,$00,$55,$58,$87,$87,$87,$87,$55,$58
  .byte $92,$00,$00,$92,$55,$58,$00,$92,$55,$56,$56,$58,$00,$00,$55,$58
  .byte $77,$77,$00,$00,$55,$58,$00,$92,$55,$57,$57,$57,$57,$56,$56,$57
  .byte $57,$58,$00,$00,$55,$58,$92,$92,$00,$00,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$00,$00,$55,$58,$00,$00,$55,$57,$57,$56,$57,$57,$57,$57
  .byte $57,$58,$00,$00,$55,$58,$92,$92,$00,$00,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$a8,$a8,$55,$58,$00,$00,$55,$58,$87,$87,$87,$87,$87,$87
  .byte $55,$58,$00,$00,$55,$56,$56,$58,$00,$00,$55,$58,$00,$00,$55,$58
  .byte $77,$77,$00,$00,$55,$58,$b7,$00,$55,$58,$87,$87,$87,$87,$87,$87
  .byte $55,$58,$00,$00,$55,$56,$56,$58,$00,$00,$55,$58,$00,$00,$55,$58
  .byte $b2,$a8,$00,$00,$55,$58,$b7,$ba,$87,$87,$87,$87,$55,$58,$87,$87
  .byte $87,$87,$87,$87,$55,$58,$00,$00,$00,$00,$00,$00,$00,$00,$55,$58
  .byte $b2,$a8,$00,$00,$55,$58,$ba,$00,$87,$87,$87,$87,$55,$58,$87,$87
  .byte $87,$87,$87,$87,$55,$58,$00,$00,$00,$00,$00,$e9,$00,$00,$55,$58
  .byte $77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77
  .byte $77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77
  .byte $77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77
  .byte $77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77,$77
"""

# Run the function and print the output
processed_output = process_raw_data(test_data)
print(processed_output)
